---
title: "Toggling the Annotation"
---

```{r setup-gravel-scatter-test, warning=FALSE, message=FALSE, echo=FALSE}
knitr::opts_chunk$set(echo = FALSE,
                      message = FALSE,
                      warning = FALSE,
                      knitr.kable.NA = '')
# wrangling packages
library(here) # here makes a project transportable
library(janitor) # clean_names
library(readxl) # read excel, duh!
library(data.table) # magical data frames
library(magrittr) # pipes
library(stringr) # string functions
library(forcats) # factor functions

# analysis packages
library(emmeans) # the workhorse for inference
library(nlme) # gls and some lmm
library(lme4) # linear mixed models
library(lmerTest) # linear mixed model inference
library(afex) # ANOVA linear models
library(glmmTMB) # generalized linear models
library(MASS) # negative binomial and some other functions
library(car) # model checking and ANOVA
library(DHARMa) # model checking
library(mvtnorm)

# graphing packages
library(ggsci) # color palettes
library(ggpubr) # publication quality plots
library(ggforce) # better jitter
library(cowplot) # combine plots
library(knitr) # kable tables
library(kableExtra) # kable_styling tables
library(ggdendro) # dendrogram
library(dendextend) # better dendrogram
library(ggiraph)
library(GGally)
library(colorspace)

# plotly
library(plotly)
library(flexdashboard)
library(crosstalk)

# ggplot_the_model.R packages not loaded above
library(insight)
library(lazyWeave)

# use here from the here package
here <- here::here
# use clean_names from the janitor package
clean_names <- janitor::clean_names
# use transpose from data.table
transpose <- data.table::transpose

pal_okabe_ito <- c(
  "#E69F00",
  "#56B4E9",
  "#009E73",
  "#F0E442",
  "#0072B2",
  "#D55E00",
  "#CC79A7"
)
pal_okabe_ito_blue <- pal_okabe_ito[c(5,6,1,2,3,7,4)] 
pal_okabe_ito_red <- pal_okabe_ito[c(6,5,3,1,2,7,4)] 
pal_okabe_ito_2 <- pal_okabe_ito[c(5,6)]
pal_okabe_ito_3 <- pal_okabe_ito[c(5,6,7)]
pal_okabe_ito_3_light <- pal_okabe_ito[c(1,2,7)]
pal_okabe_ito_4 <- pal_okabe_ito[c(5,6,7,2)]

pal_okabe_ito_3 <- pal_okabe_ito[c(1,2,3)]
pal_okabe_ito_3_dark <- darken(pal_okabe_ito_3, .3)
# c("#9D6C06" "#077DAA" "#026D4E") # .3
# c("#875C04" "#046A92" "#065D43") # .4
# c("#714C02" "#01587A" "#024E37") # .5


geo_bike_path <- here("rds", "geobike.Rds")
geobike <- readRDS(geo_bike_path)
my_fit_path <- here("rds", "my_fit.Rds")
my_fit <- readRDS(my_fit_path)

```

```{r scatter-fig}
scatter_fig <- function(x_col = "reach", y_col = "stack",
                        x_label = "Reach", y_label = "Stack",
                        x_info = NULL, y_info = NULL,
                        digits = 0,
                        jitter_x = 0, jitter_y = 0,
                        which_model = NULL){
  if(is.null(x_info)){x_info <- x_label}
  if(is.null(y_info)){y_info <- y_label}
  
  fig <- plot_ly(shared_data, type = "scatter", mode = "markers",
                 x = ~jitter(get(x_col), jitter_x),
                 y = ~jitter(get(y_col), jitter_y),
                 color = ~restyle,
                 colors = pal_okabe_ito_3,
                 size = 2,
                 name = ~model,
                 legendgroup = ~model,
                 hoverinfo = "text",
                 text = ~paste(model, frame_size,
                               "<br>Cat:", restyle,
                               paste0("<br>", x_info, ":"), round(get(x_col), digits),
                               paste0("<br>", y_info, ":"), round(get(y_col), digits)
                 )) %>% 
    #  highlight(on = "plotly_click", off = "plotly_doubleclick") %>%
    layout(showlegend = TRUE,
           xaxis = list(title = x_label),
           yaxis = list(title = y_label)
    ) %>%
    style(showlegend = FALSE, traces = 1)
  
  if(!is.null(which_model)){
    a <- list(
      x = my_fit[model == which_model, get(x_col)],
      y = my_fit[model == which_model, get(y_col)],
      text = my_fit[model == which_model, model],
      xref = "x",
      yref = "y",
      showarrow = TRUE,
      arrowhead = 1,
      ax = 20,
      ay = -20
    )
    fig <- fig %>% layout(annotations = a)
    
    
    
  }
  
  
  return(fig)
}

```

```{r}
model_i <- NULL
model_i <- "Specialized Diverge STR"

shared_data <- my_fit %>% 
  SharedData$new()


p1 <- scatter_fig(x_col = "reach", y_col = "stack",
                  x_label = "Reach", y_label = "Stack",
                  which_model = model_i)
p2 <- scatter_fig(x_col = "rear_center", y_col = "front_center",
                  x_label = "Rear Center", y_label = "Front Center",
                  x_info = "RC", y_info = "FC",
                  which_model = model_i)
p3 <- scatter_fig(x_col = "head_tube_angle", y_col = "seat_tube_angle",
                  x_label = "Head Tube Angle", y_label = "Seat Tube Angle",
                  x_info = "HTA", y_info = "STA", digits = 1,
                  jitter_x = 0,
                  jitter_y = 0,
                  which_model = model_i)
p4 <- scatter_fig(x_col = "trail", y_col = "bottom_bracket_drop",
                  x_label = "Trail", y_label = "Bottom Bracket Drop",
                  x_info = "Trail", y_info = "BBD", digits = 0,
                  which_model = model_i)
p5 <- scatter_fig(x_col = "front_wheelbase", y_col = "stack_reach",
                  x_label = "Front Center/Wheelbase", y_label = "Stack/Reach",
                  x_info = "FC/WB", y_info = "Stack/Reach", digits = 2,
                  which_model = model_i)
p6 <- scatter_fig(x_col = "front_wheelbase", y_col = "sta_hta",
                  x_label = "Front Center/Wheelbase", y_label = "STA/HTA",
                  x_info = "FC/WB", y_info = "STA/HTA", digits = 2,
                  which_model = model_i)

p1
p2
p3
p4
p5
p6


#new
```

```{r test-jitter, eval=FALSE}
p3 <- scatter_fig(x_col = "head_tube_angle", y_col = "seat_tube_angle",
                  x_label = "Head Tube Angle", y_label = "Seat Tube Angle",
                  x_info = "HTA", y_info = "STA", digits = 1,
                  jitter_x = 0,
                  jitter_y = 0)
p3

p3 <- scatter_fig(x_col = "head_tube_angle", y_col = "seat_tube_angle",
                  x_label = "Head Tube Angle", y_label = "Seat Tube Angle",
                  x_info = "HTA", y_info = "STA", digits = 1,
                  jitter_x = 10,
                  jitter_y = 10)
p3

```

```{r test, eval = FALSE}
fig <- plot_ly(my_fit, type = "scatter", mode = "markers",
               x = ~reach,
               y = ~stack,
               color = ~restyle,
               colors = pal_okabe_ito_3,
               size = 3,
               name = ~model,
               hoverinfo = "text",
               text = ~paste(model, frame_size,
                             "<br>Cat:", restyle,
                             "<br>Reach:", reach,
                             "<br>Stack:", stack)) %>% 
  layout(showlegend = TRUE,
         xaxis = list(title = "Reach"),
         yaxis = list(title = "Stack"),
         updatemenus = list(
           list(
             y = 0.7,
             buttons = list(
               list(method = "restyle",
                    args = list("y", ~stack),  # put it in a list
                    label = "Stack"),
               list(method = "restyle",
                    args = list("y", ~front_center),  # put it in a list
                    label = "Front-center")))
         )
  ) %>%
  style(showlegend = FALSE, traces = 1)



fig
```

## toggle legend

```{r}

t <- list(
  family = "sans serif",
  size = 14,
  color = toRGB("grey50"))

dt <- data.table(
  style = rep(c("a","b","c"), each = 3),
  model = paste0("bike", 1:9),
  stack = rnorm(9),
  reach = rnorm(9)
)

t <- list(
  family = "sans serif",
  size = 14,
  color = toRGB("grey50"))

dt <- data.table(
  style = rep(c("a","b","c"), each = 3),
  model = paste0("bike", 1:9),
  stack = rnorm(9),
  reach = rnorm(9)
)
dt[, model2 := model]

fig <- plot_ly(dt, type = "scatter", mode = "markers",
               x = ~stack,
               y = ~reach,
               color = ~style,
               colors = pal_okabe_ito_3,
               size = 2,
               name = ~model,
               hoverinfo = "text",
               text = ~model,
               showlegend = FALSE
) %>%
  add_text(textfont = t,
           color = ~style,
 #          colors = pal_okabe_ito_3_dark, # colors doesn't do anything
            colors = "black",
           symbol = "circle",
           textposition = "right",
           text = "\U2B05",
           visible = "legendonly",
           showlegend = TRUE
  ) 

fig
```

## Superimpose points and toggle with legend

```{r}

t <- list(
  family = "sans serif",
  size = 14,
  color = toRGB("grey50"))

dt <- data.table(
  style = rep(c("a","b","c"), each = 3),
  model = paste0("bike", 1:9),
  stack = rnorm(9),
  reach = rnorm(9)
)
dt[, model2 := model]

fig <- plot_ly(dt, type = "scatter", mode = "markers",
               x = ~stack,
               y = ~reach,
               color = ~style,
               colors = pal_okabe_ito_3,
               opacity = 0.5,
               size = 2,
               name = ~model,
               #               legendgroup = ~model,
               hoverinfo = "text blah blah",
               text = ~model,
               showlegend = FALSE
) %>%
  add_text(textfont = t,
           color = ~style,
           colors = pal_okabe_ito_3,
           symbol = "circle",
           textposition = "top right",
           text = ~ model,
           visible = "legendonly",
           showlegend = TRUE
  ) %>%
  add_trace(x = ~stack,
            y = ~reach,
            marker = list(
              color = ~style,
              colors = pal_okabe_ito_3,
              opacity = 0.5,
              size = 2,
              name = ~model,
              hoverinfo = paste("text", "blahblah2"),
              text = ~model
            ),
            showlegend = FALSE
  )


fig
```

# buttons

```{r}

annotations = list()
for (i in 1:nrow(my_fit)) {
  annotation <- list(x = my_fit[i, reach],
                      y = my_fit[i, stack],
                      text = my_fit[i, model],
                      showarrow = TRUE)
  annotations[[i]] <- annotation
}

update_menus_i <- list(
  list(
    type = 'buttons',
    buttons = list(
        list(
        label = my_fit[1, model],
        method = "update",
        args = list(list(),
                    list(annotations = annotations[[1]]))),
        list(
        label = my_fit[2, model],
        method = "update",
        args = list(list(),
                    list(annotations = annotations[[2]])))
   )
  )
)


fig <- plot_ly(my_fit, type = "scatter", mode = "markers",
               x = ~reach,
               y = ~stack,
               color = ~restyle,
               colors = pal_okabe_ito_3,
               size = 3,
               name = ~model,
               hoverinfo = "text",
               text = ~paste(model, frame_size,
                             "<br>Cat:", restyle,
                             "<br>Reach:", reach,
                             "<br>Stack:", stack)) %>% 
  layout(showlegend = TRUE,
         xaxis = list(title = "Reach"),
         yaxis = list(title = "Stack"),
         annotations = annotations,
         updatemenus = update_menus_i
)

fig
```

