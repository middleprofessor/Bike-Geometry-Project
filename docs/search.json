[
  {
    "objectID": "qmd/gravel_class.html",
    "href": "qmd/gravel_class.html",
    "title": "Gravel Style",
    "section": "",
    "text": "Classification of bikes is based on a frame size that fits a 176 cm (5' 9.3\") cm high rider, according to manufacturer's charts.\n \n  \n    Racy \n    Relaxed \n    Rowdy \n  \n \n\n  \n    Alchemy Lycos \n    Bearclaw Beaux Jaxon \n    Amigo Bug Out \n  \n  \n    Alchemy Rogue \n    BlackMtnCy La Cabra \n    BMC URS AL \n  \n  \n    All-City Cosmic Stallion \n    Bombtrack Beyond 2 \n    BMC URS AL SUS \n  \n  \n    All-City Gorilla Monsoon \n    Chiru Kegeti \n    BMC URS One \n  \n  \n    All-City Space Horse \n    Cinelli Hobootleg Geo \n    Bombtrack Beyond+ Adv \n  \n  \n    Argonaut GR3 \n    Genesis Vagabond \n    Breezer Radar X Pro \n  \n  \n    BlackMtnCy Monstercross V5 \n    Light Blue Darwin \n    Chumba Yaupon \n  \n  \n    Blackheart All Road TI \n    Mason InSearchOf \n    Cotic Cascade \n  \n  \n    Bombtrack Hook \n    Moots Routt ESC \n    Enigma Escape Flat-bar \n  \n  \n    Cannondale SuperSix Evo SE \n    Otso Warakin Stainless \n    Evil Chamois Hagar GRX \n  \n  \n    Cannondale Topstone Lefty \n    Panorama Taiga EXP \n    Fezzari Shafer \n  \n  \n    Canyon Grail 7 1by \n    Reeb Sams Pants \n    Fiftyone Assassin long-low \n  \n  \n    Canyon Grizl 7 1by \n    Ritchey Outback frameset \n    Fiftyone Assassin short-hi \n  \n  \n    Cervelo Aspero \n    Salsa Cutthroat \n    Fustle Causway GR1 \n  \n  \n    Chumba Terlingua steel fdo \n    Salsa Fargo front dropout \n    Hudski Doggler Gravel \n  \n  \n    Commencal 365 \n    Salsa Fargo rear dropout \n    Kanzo Adventure New \n  \n  \n    Devinci Hatchet \n    Salsa Vaya \n    Knolly Cache Steel \n  \n  \n    Enve Mog \n    Tout Terrain Scrambler 28 \n    Kona Sutra ULTD \n  \n  \n    Focus Atlas 8.9 \n    Tumbleweed Stargazer \n    Marin DSX 2 \n  \n  \n    Giant Revolt X pro 1 long \n    NA \n    Mosaic GT-1X \n  \n  \n    Giant Revolt X pro 1 short \n    NA \n    Nordest Kutxo \n  \n  \n    Giant Revolt pro long \n    NA \n    Otso Fenrir \n  \n  \n    Giant Revolt pro short \n    NA \n    Revel Rover \n  \n  \n    Ibis Hakka MX \n    NA \n    Rondo MYLC CF Hi \n  \n  \n    Lauf Siegla \n    NA \n    Rondo MYLC CF Lo \n  \n  \n    Liz Devote Advance \n    NA \n    Sonder Camino AL \n  \n  \n    Merida Silex \n    NA \n    Specialized Diverge Evo \n  \n  \n    Niner RLT 9 RDO \n    NA \n    Surly Ghost Grappler \n  \n  \n    No22 Drifter X \n    NA \n    Whyte Friston Gravel \n  \n  \n    Noble GX 5 \n    NA \n    YT Szepter \n  \n  \n    OPEN U.P. \n    NA \n    NA \n  \n  \n    Obed Boundary \n    NA \n    NA \n  \n  \n    Open WI.DE \n    NA \n    NA \n  \n  \n    Orbea Terra H \n    NA \n    NA \n  \n  \n    Orbea Terra M \n    NA \n    NA \n  \n  \n    Otso Waheela C front \n    NA \n    NA \n  \n  \n    Otso Waheela C rear \n    NA \n    NA \n  \n  \n    Pinarello Grevil F \n    NA \n    NA \n  \n  \n    Ribble Gravel SL \n    NA \n    NA \n  \n  \n    Rose Backroad XPLR \n    NA \n    NA \n  \n  \n    Salsa Warbird \n    NA \n    NA \n  \n  \n    Santa Cruz Stigmata \n    NA \n    NA \n  \n  \n    Scott Addict Gravel \n    NA \n    NA \n  \n  \n    Shand Stooshie \n    NA \n    NA \n  \n  \n    Solace OM-3 Short \n    NA \n    NA \n  \n  \n    Soma Wolverine \n    NA \n    NA \n  \n  \n    Specialized Diverge \n    NA \n    NA \n  \n  \n    Specialized Diverge STR \n    NA \n    NA \n  \n  \n    Squid Gravtron \n    NA \n    NA \n  \n  \n    Thesis OB1 \n    NA \n    NA \n  \n  \n    Trek Checkpoint SL5 \n    NA \n    NA \n  \n  \n    Ventum GS1 \n    NA \n    NA \n  \n  \n    Why R+ V4 \n    NA \n    NA \n  \n  \n    Wilde Earth Ship Steel \n    NA \n    NA \n  \n  \n    Wilde Rambler SL \n    NA \n    NA \n  \n  \n    Wilier Jena \n    NA \n    NA \n  \n  \n    Wilier Rave SLR \n    NA \n    NA"
  },
  {
    "objectID": "qmd/which_gravel_bikes_are_mtb_inspired.html",
    "href": "qmd/which_gravel_bikes_are_mtb_inspired.html",
    "title": "Which gravel bikes have mountain bike inspired geometry?",
    "section": "",
    "text": "Classification of gravel bikes is based on a frame size that fits a 176 cm (5’ 9.3\") cm high rider, according to manufacturer’s charts."
  },
  {
    "objectID": "qmd/what_is_a_gravel_bike.html",
    "href": "qmd/what_is_a_gravel_bike.html",
    "title": "What is Gravel Style?",
    "section": "",
    "text": "It’s common to read from company websites or from bike influencers on YouTube that gravel bikes come in two flavors: race and off-road. 2D scatter plots suggest three classes:\n\nRacy. Effectively, these have cyclocross bike geometry\nRelaxed. Compared to Racy: More upright, longer rearends, and longer trail – this is the direction of endurance road bikes compared to race road bikes.\nRowdy. Compared to Racy: Longer, slacker front ends, and steeper seat tubes – this is the direction of XC mountain bikes compared to road bikes.\n\n(Data shown are frame sizse that fit a 176 cm (5’ 9.3\") cm high rider, according to manufacturer’s charts)"
  },
  {
    "objectID": "qmd/gravel_tree.html",
    "href": "qmd/gravel_tree.html",
    "title": "Gravel Tree",
    "section": "",
    "text": "Classification of bikes is based on a frame size that fits a 176 cm (5’ 9.3\") cm high rider, according to manufacturer’s charts."
  },
  {
    "objectID": "qmd/mtb_90s.html",
    "href": "qmd/mtb_90s.html",
    "title": "Is a gravel bike a 1990s mountain bike?",
    "section": "",
    "text": "(Classification of gravel bikes is based on a frame size that fits a 176 cm (5’ 9.3\") cm high rider, according to manufacturer’s charts."
  },
  {
    "objectID": "qmd/gravel_scatter.html",
    "href": "qmd/gravel_scatter.html",
    "title": "Gravel 2D",
    "section": "",
    "text": "Hover over data for model and frame size identification.\nScroll legend and click on items to identify specific model and frame size combinations.\nClick on popup icon-bar over legend to zoom in/out and pan.\nClassification of gravel bikes is based on a frame size that fits a 176 cm (5’ 9.3”) cm high rider, according to manufacturer’s charts."
  },
  {
    "objectID": "qmd/gravel_histo.html",
    "href": "qmd/gravel_histo.html",
    "title": "Gravel 1D",
    "section": "",
    "text": "Classification of gravel bikes is based on a frame size that fits a 176 cm (5’ 9.3”) cm high rider, according to manufacturer’s charts"
  },
  {
    "objectID": "qmd/wilde_rambler.html",
    "href": "qmd/wilde_rambler.html",
    "title": "Wilde Rambler",
    "section": "",
    "text": "“So in my lineage, as I progressed through the industry, we had the Space Horse, then we had the Cosmic Stallion, and then I created the Earth ship, which was an iter iteration of those works, an evolution of those works. And now we have the Rambler. And so when I, things I like in gravel bikes. I believe that an endurance bike comfortable is fast.”\n– Jeff Frane, Gravel Ride Podcast"
  },
  {
    "objectID": "Rmd/bike_geometry_project.html",
    "href": "Rmd/bike_geometry_project.html",
    "title": "Bike Geometry Project",
    "section": "",
    "text": "knitr::opts_chunk$set(echo = TRUE,\n                      message = FALSE,\n                      warning = FALSE,\n                      knitr.kable.NA = '')\n# wrangling packages\nlibrary(here) # here makes a project transportable\nlibrary(janitor) # clean_names\nlibrary(readxl) # read excel, duh!\nlibrary(data.table) # magical data frames\nlibrary(magrittr) # pipes\nlibrary(stringr) # string functions\nlibrary(forcats) # factor functions\nlibrary(arules) # discretize function\n\n# analysis packages\nlibrary(emmeans) # the workhorse for inference\nlibrary(nlme) # gls and some lmm\nlibrary(lme4) # linear mixed models\nlibrary(lmerTest) # linear mixed model inference\nlibrary(afex) # ANOVA linear models\nlibrary(glmmTMB) # generalized linear models\nlibrary(MASS) # negative binomial and some other functions\nlibrary(car) # model checking and ANOVA\nlibrary(DHARMa) # model checking\nlibrary(mvtnorm)\n\n# graphing packages\nlibrary(ggsci) # color palettes\nlibrary(ggpubr) # publication quality plots\nlibrary(ggforce) # better jitter\nlibrary(cowplot) # combine plots\nlibrary(knitr) # kable tables\nlibrary(kableExtra) # kable_styling tables\nlibrary(ggdendro) # dendrogram\nlibrary(dendextend) # better dendrogram\nlibrary(ggiraph)\nlibrary(GGally)\n\n# plotly\nlibrary(plotly)\nlibrary(flexdashboard)\nlibrary(crosstalk)\n\n# ggplot_the_model.R packages not loaded above\nlibrary(insight)\nlibrary(lazyWeave)\n\n# use here from the here package\nhere <- here::here\n# use clean_names from the janitor package\nclean_names <- janitor::clean_names\n# use transpose from data.table\ntranspose <- data.table::transpose\n\n# load functions used by this text written by me\n# ggplot_the_model.R needs to be in the folder \"R\"\n# if you didn't download this and add to your R folder in your\n# project, then this line will cause an error\n#source_path <- here(\"R\", \"ggplot_the_model.R\")\n#source(source_path)\n\ndata_folder <- \"data\"\nimage_folder <- \"images\"\noutput_folder <- \"output\"\n\npal_okabe_ito <- c(\n  \"#E69F00\",\n  \"#56B4E9\",\n  \"#009E73\",\n  \"#F0E442\",\n  \"#0072B2\",\n  \"#D55E00\",\n  \"#CC79A7\"\n)\npal_okabe_ito_7 <- pal_okabe_ito[c(2,3,1,4,5,6,7)]\npal_okabe_ito_3 <- pal_okabe_ito[c(2,3,1)]\npal_okabe_ito_4 <- c(pal_okabe_ito_3, pal_okabe_ito[c(6)])"
  },
  {
    "objectID": "Rmd/bike_geometry_project.html#general",
    "href": "Rmd/bike_geometry_project.html#general",
    "title": "Bike Geometry Project",
    "section": "General",
    "text": "General\n\ndeg_2_rad <- function(x){\n  rad <- x*pi/180\n  return(rad)\n}"
  },
  {
    "objectID": "Rmd/bike_geometry_project.html#dendrogram",
    "href": "Rmd/bike_geometry_project.html#dendrogram",
    "title": "Bike Geometry Project",
    "section": "Dendrogram",
    "text": "Dendrogram\n\n# https://atrebas.github.io/post/2019-06-08-lightweight-dendrograms/\ndendro_data_k <- function(hc, k) {\n  hcdata    <-  ggdendro::dendro_data(hc, type = \"rectangle\")\n  seg       <-  hcdata$segments\n  labclust  <-  cutree(hc, k)[hc$order]\n  segclust  <-  rep(0L, nrow(seg))\n  heights   <-  sort(hc$height, decreasing = TRUE)\n  height    <-  mean(c(heights[k], heights[k - 1L]), na.rm = TRUE)\n  \n  for (i in 1:k) {\n    xi      <-  hcdata$labels$x[labclust == i]\n    idx1    <-  seg$x    >= min(xi) & seg$x    <= max(xi)\n    idx2    <-  seg$xend >= min(xi) & seg$xend <= max(xi)\n    idx3    <-  seg$yend < height\n    idx     <-  idx1 & idx2 & idx3\n    segclust[idx] <- i\n  }\n  \n  idx                    <-  which(segclust == 0L)\n  segclust[idx]          <-  segclust[idx + 1L]\n  hcdata$segments$clust  <-  segclust\n  hcdata$segments$line   <-  as.integer(segclust < 1L)\n  hcdata$labels$clust    <-  labclust\n  \n  hcdata\n}\n\nset_labels_params <- function(nbLabels,\n                              direction = c(\"tb\", \"bt\", \"lr\", \"rl\"),\n                              fan       = FALSE) {\n  if (fan) {\n    angle       <-  360 / nbLabels * 1:nbLabels + 90\n    idx         <-  angle >= 90 & angle <= 270\n    angle[idx]  <-  angle[idx] + 180\n    hjust       <-  rep(0, nbLabels)\n    hjust[idx]  <-  1\n  } else {\n    angle       <-  rep(0, nbLabels)\n    hjust       <-  0\n    if (direction %in% c(\"tb\", \"bt\")) { angle <- angle + 45 }\n    if (direction %in% c(\"tb\", \"rl\")) { hjust <- 1 }\n  }\n  list(angle = angle, hjust = hjust, vjust = 0.5)\n}\n\nplot_ggdendro <- function(hcdata,\n                          direction   = c(\"lr\", \"rl\", \"tb\", \"bt\"),\n                          fan         = FALSE,\n                          scale.color = NULL,\n                          branch.size = 1,\n                          label.size  = 3,\n                          nudge.label = 0.01,\n                          expand.y    = 0.1) {\n  \n\n  direction <- match.arg(direction) # if fan = FALSE\n  ybreaks   <- pretty(segment(hcdata)$y, n = 5)\n  ymax      <- max(segment(hcdata)$y)\n  \n  ## branches\n  p <- ggplot() +\n    geom_segment(data         =  segment(hcdata),\n                 aes(x        =  x,\n                     y        =  y,\n                     xend     =  xend,\n                     yend     =  yend,\n                     linetype =  factor(line),\n                     colour   =  factor(clust)),\n                 lineend      =  \"round\",\n                 show.legend  =  FALSE,\n                 size         =  branch.size)\n  \n  ## orientation\n  if (fan) {\n    p <- p +\n      coord_polar(direction = -1) +\n      scale_x_continuous(breaks = NULL,\n                         limits = c(0, nrow(label(hcdata)))) +\n      scale_y_reverse(breaks = ybreaks)\n  } else {\n    p <- p + scale_x_continuous(breaks = NULL)\n    if (direction %in% c(\"rl\", \"lr\")) {\n      p <- p + coord_flip()\n    }\n    if (direction %in% c(\"bt\", \"lr\")) {\n      p <- p + scale_y_reverse(breaks = ybreaks)\n    } else {\n      p <- p + scale_y_continuous(breaks = ybreaks)\n      nudge.label <- -(nudge.label)\n    }\n  }\n  \n  # labels\n  labelParams <- set_labels_params(nrow(hcdata$labels), direction, fan)\n  hcdata$labels$angle <- labelParams$angle\n  \n  p <- p +\n    geom_text(data        =  label(hcdata),\n              aes(x       =  x,\n                  y       =  y,\n                  label   =  label,\n                  colour  =  factor(clust),\n                  angle   =  angle),\n              vjust       =  labelParams$vjust,\n              hjust       =  labelParams$hjust,\n              nudge_y     =  ymax * nudge.label,\n              size        =  label.size,\n              show.legend =  FALSE)\n  \n  # theme\n    # p <- p + theme_pubr() +\n    #   theme(axis.text.x=element_blank())\n  \n  # colors and limits\n  if (!is.null(scale.color)) {\n    scale.color <- c(\"#000000\", scale.color) #my addition\n    p <- p + scale_color_manual(values = scale.color)\n  }\n  \n  ylim <- -round(ymax * expand.y, 1)\n  p    <- p + expand_limits(y = ylim)\n\n  \n  p\n}\n\n\nget_tree <- function(geobike_subset,\n                  y_cols,\n                  scale_it = TRUE,\n                  center_it = TRUE,\n                  hclust_method = \"ward.D2\"\n){\n  # dd <- dist(scale(geobike_subset[, .SD, .SDcols = y_cols],\n  #                  center = center_it,\n  #                  scale = scale_it),\n  #            method = \"euclidean\")\n  # dendro <- hclust(dd, method = hclust_method) %>%\n  #   as.dendrogram() %>%\n  #   place_labels(paste(geobike_subset[, model],\n  #                      geobike_subset[, frame_size],\n  #                      sep = \", \"))\n  \n  cluster_data <- geobike_subset[, .SD, .SDcols = y_cols] %>%\n    data.frame\n  row.names(cluster_data) <- paste(geobike_subset[, model],\n                                   geobike_subset[, frame_size],\n                                   sep = \", \")\n  d_matrix <- dist(scale(cluster_data,\n                         center = center_it,\n                         scale = scale_it),\n                   method = \"euclidean\")\n  hc <- hclust(d_matrix, method = hclust_method)\n  return(hc)\n  \n}"
  },
  {
    "objectID": "Rmd/bike_geometry_project.html#bike-geometry-helpers",
    "href": "Rmd/bike_geometry_project.html#bike-geometry-helpers",
    "title": "Bike Geometry Project",
    "section": "Bike geometry helpers",
    "text": "Bike geometry helpers\n\ncompute_axle_crown <- function(){\n  \n}\n\ncompute_chainstay_h <- function(bike){\n  # the horizontal component of chainstay length \n  # bbd = bottom bracket drop\n  # csl = chainstay length\n  chainstay_h <- with(bike,\n                      sqrt(chainstay_length^2 - bottom_bracket_drop^2))\n  return(chainstay_h)\n}\n\n\ncompute_offset_h <- function(bike){\n  # the horizontal component of fork offset\n  offset_h <- with(bike,\n                 fork_offset_rake/sin(deg_2_rad(head_tube_angle)))\n  return(offset_h)\n}\n\ncompute_head_tube_h <- function(bike){\n  # the horizontal component of head_tube\n  head_tube_h <- with(bike,\n               head_tube_length*cos(deg_2_rad(head_tube_angle)))\n  return(head_tube_h)\n}\ncompute_head_tube_v <- function(bike){\n  # the vertical component of head_tube\n  head_tube_v <- with(bike,\n                      head_tube_length*sin(deg_2_rad(head_tube_angle)))\n  return(head_tube_v)\n}\n\ncompute_fork_angle <- function(bike){\n  # angle of fork axle-crown axis to horizontal\n  # beta is angle of fork axle-crow to offset line\n  beta <- with(bike,\n               acos(fork_offset_rake/axle_crown)*180/pi)\n  # delta is angle from offset line to horizontal\n  delta <- with(bike,\n                90 - head_tube_angle)\n  fork_angle <- beta - delta\n  return(fork_angle)\n}\n\ncompute_steering_v <- function(bike){\n  # steering_v is the vertical component of the steering axis from top of head tube\n  # to the horizontal line through wheel axles - so height from axle to head tube crown\n  steering_v <- with(bike,\n                     stack - bottom_bracket_drop)\n  return(steering_v)\n}\n\ncompute_steering_h <- function(bike){\n  steering_v <- compute_steering_v(bike)\n  steering_h <- with(bike,\n                     steering_v/tan(deg_2_rad(head_tube_angle)))\n  return(steering_h)\n}"
  },
  {
    "objectID": "Rmd/bike_geometry_project.html#compute-missing-data",
    "href": "Rmd/bike_geometry_project.html#compute-missing-data",
    "title": "Bike Geometry Project",
    "section": "Compute missing data",
    "text": "Compute missing data\n\ncompute_wheelbase <- function(bike){\n  steering_v <- compute_steering_v(bike)\n  steering_h <- compute_steering_h(bike)\n  offset_h <- compute_offset_h(bike)\n  chainstay_h <- compute_chainstay_h(bike)\n  wheelbase <- with(bike,\n                    chainstay_h + reach + steering_h + offset_h)\n  return(wheelbase)\n}\n\n# Solace OM3 does not specify head tube length. This can be\n# computed using specs of Whisky MCX fork assuming this is\n# the fork used to spec wheelbase\nhead_tube_length <- function(bike){\n  offset_h <- compute_offset_h(bike)\n  fork_angle <- compute_fork_angle(bike)\n}\n\n# Vagabond Genesis does not specify chainstay length.\ncompute_chainstay_length <- function(bike){\n  head_tube_h <- compute_head_tube_h(bike)\n  head_tube_v <- compute_head_tube_v(bike)\n  fork_v <- with(bike,\n                 stack - bottom_bracket_drop - head_tube_v)\n  \n  fork_h1 = with(bike,\n                 fork_v/tan(deg_2_rad(head_tube_angle)))\n  offset_h <- compute_offset_h(bike)\n  chainstay_h <- with(bike,\n                      wheelbase - reach - head_tube_h - fork_h1 - \n                        offset_h)\n  \n  chainstay <- with(bike,\n                    sqrt(chainstay_h^2 + bottom_bracket_drop^2))\n  \n  return(chainstay)\n}\n\ncompute_fork_offset <- function(bike){\n  # steer_axis_h is base of triangle from top-head-tube to vertex created by steering axis and wheelbase.\n  # tan hta <- stack/steer_axis_h\n  steer_axis_v <- with(bike,\n                       stack - bottom_bracket_drop)\n  steer_axis_h <- with(bike,\n                       steer_axis_v /\n                         tan(deg_2_rad(head_tube_angle)))\n  chainstay_h <- compute_chainstay_h(bike)\n  offset_h <- with(bike,\n                   wheelbase - chainstay_h - reach - steer_axis_h)\n  offset <- with(bike,\n                 offset_h * sin(deg_2_rad(head_tube_angle)))\n  return(offset)\n}\n\ncompute_effective_top_tube_length <- function(bike){\n  # amigo bug out is missing this\n  #\n  seat_h <- with(bike,\n                 stack/tan(deg_2_rad(seat_tube_angle)))\n  effective_top_tube_length <- with(bike,\n                                    seat_h + reach)\n  return(effective_top_tube_length)\n}"
  },
  {
    "objectID": "Rmd/bike_geometry_project.html#geometery-checker",
    "href": "Rmd/bike_geometry_project.html#geometery-checker",
    "title": "Bike Geometry Project",
    "section": "geometery checker",
    "text": "geometery checker\n\ngeom_checker <- function(chainstay_length, # chainstay length\n                         bottom_bracket_drop, # bottom bracket drop\n                         reach,\n                         stack,\n                         head_tube_angle, # head tube angle\n                         rake, # head tube length\n                         wheelbase){ # wheelbase\n  # do all the horizontal components add to wheelbase?\n  chainstay_length_h <- compute_chainstay_h(bike)\n  steer_axis_v <- stack - bottom_bracket_drop\n  steer_axis_h <- steer_axis_v /\n    tan(deg_2_rad(head_tube_angle))\n\n  offset_h <- compute_offset_h(bike)\n  wheelbase_computed <- chainstay_length_h + reach +\n    steer_axis_h + offset_h\n\n  }"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bike Geometry Project",
    "section": "",
    "text": "The Gravel Scatter page contains interactive, 2D scatter plots of different pairs of frame geometry measures for all gravel bike models and frame sizes in the database.\n\n\n\n\n\nThe Gravel Tree page contains a tree diagram showing the relative similarity in frame geometry among all gravel bikes in the database and the clustering of the models into three major styles.\n\n\n\n\n\nThe Gravel Style page contains a table of the classification of all gravel bike models in the database into All-road, Endurance, and Trail categories.\n\n\n\n\n\nAlso, check out the Gravel Stories\nWhich gravel bikes have mountain bike inspired geometry?\nIs a gravel bike a 1990s mountain bike?\ncopyright 2022 Jeffrey A. Walker"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Jeff Walker",
    "section": "",
    "text": "I’m a Professor of Biology at the University of Southern Maine in Portland with a research program that has moved from geometric morphometrics to fish swimming biomechanics, to best practices in statistics for experimental bench biologists.\nFor recreation, I’m mostly a mountain runner but also XC skier, backcountry skier (mostly resort uphill), and gravel cyclist, and do most of these activities in the White Mountains of New Hampshire.\nThe bike geometry project combines my interests in biological shape, biomechanics, biostatistics, and outdoor recreation."
  }
]