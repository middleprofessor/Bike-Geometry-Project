[
  {
    "objectID": "qmd/toggle_annotation.html#toggle-legend",
    "href": "qmd/toggle_annotation.html#toggle-legend",
    "title": "Toggling the Annotation",
    "section": "toggle legend",
    "text": "toggle legend"
  },
  {
    "objectID": "qmd/toggle_annotation.html#superimpose-points-and-toggle-with-legend",
    "href": "qmd/toggle_annotation.html#superimpose-points-and-toggle-with-legend",
    "title": "Toggling the Annotation",
    "section": "Superimpose points and toggle with legend",
    "text": "Superimpose points and toggle with legend"
  },
  {
    "objectID": "qmd/gravel_class.html",
    "href": "qmd/gravel_class.html",
    "title": "Gravel Style",
    "section": "",
    "text": "Classification of bikes is based on a frame size that fits a 176 cm (5' 9.3\") cm high rider, according to manufacturer's charts.\n \n  \n    All Road \n    Endurance \n    Trail \n  \n \n\n  \n    Alchemy Lycos \n    Bearclaw Beaux Jaxon \n    Amigo Bug Out \n  \n  \n    Alchemy Rogue \n    BlackMtnCy La Cabra \n    BMC URS AL \n  \n  \n    All-City Cosmic Stallion \n    Bombtrack Beyond 2 \n    BMC URS AL SUS \n  \n  \n    All-City Gorilla Monsoon \n    Chiru Kegeti \n    BMC URS One \n  \n  \n    Argonaut GR3 \n    Cinelli Hobootleg Geo \n    Bombtrack Beyond+ Adv \n  \n  \n    BlackMtnCy Monstercross V5 \n    Genesis Vagabond \n    Breezer Radar X Pro \n  \n  \n    Blackheart All Road TI \n    Light Blue Darwin \n    Chumba Yaupon \n  \n  \n    Bombtrack Hook \n    Mason InSearchOf \n    Cotic Cascade \n  \n  \n    Cannondale SuperSix Evo \n    Moots Routt ESC \n    Enigma Escape Flat-bar \n  \n  \n    Cannondale Topstone Lefty \n    Panorama Taiga EXP \n    Evil Chamois Hagar GRX \n  \n  \n    Canyon Grail 7 1by \n    Reeb Sams Pants \n    Fezzari Shafer \n  \n  \n    Canyon Grizl 7 1by \n    Ritchey Outback frameset \n    Fiftyone Assassin long-low \n  \n  \n    Cervelo Aspero \n    Salsa Cutthroat \n    Fiftyone Assassin short-hi \n  \n  \n    Chumba Terlingua steel fdo \n    Salsa Fargo front dropout \n    Fustle Causway GR1 \n  \n  \n    Commencal 365 \n    Salsa Fargo rear dropout \n    Hudski Doggler Gravel \n  \n  \n    Devinci Hatchet \n    Salsa Vaya \n    Kanzo Adventure New \n  \n  \n    Focus Atlas 8.9 \n    Tout Terrain Scrambler 28 \n    Knolly Cache Steel \n  \n  \n    Giant Revolt X pro 1 long \n    Tumbleweed Stargazer \n    Kona Sutra ULTD \n  \n  \n    Giant Revolt X pro 1 short \n    NA \n    Marin DSX 2 \n  \n  \n    Giant Revolt pro long \n    NA \n    Mosaic GT-1X \n  \n  \n    Giant Revolt pro short \n    NA \n    Nordest Kutxo \n  \n  \n    Ibis Hakka MX \n    NA \n    Otso Fenrir \n  \n  \n    Lauf Siegla \n    NA \n    Revel Rover \n  \n  \n    Liz Devote Advance \n    NA \n    Rondo MYLC CF Hi \n  \n  \n    Merida Silex \n    NA \n    Rondo MYLC CF Lo \n  \n  \n    Niner RLT 9 RDO \n    NA \n    Sonder Camino AL \n  \n  \n    No22 Drifter X \n    NA \n    Specialized Diverge Evo \n  \n  \n    Noble GX 5 \n    NA \n    Surly Ghost Grappler \n  \n  \n    OPEN U.P. \n    NA \n    Whyte Friston Gravel \n  \n  \n    Obed Boundary \n    NA \n    YT Szepter \n  \n  \n    Open WI.DE \n    NA \n    NA \n  \n  \n    Orbea Terra H \n    NA \n    NA \n  \n  \n    Orbea Terra M \n    NA \n    NA \n  \n  \n    Otso Waheela C front \n    NA \n    NA \n  \n  \n    Otso Waheela C rear \n    NA \n    NA \n  \n  \n    Otso Warakin Stainless \n    NA \n    NA \n  \n  \n    Pinarello Grevil F \n    NA \n    NA \n  \n  \n    Ribble Gravel SL \n    NA \n    NA \n  \n  \n    Rose Backroad XPLR \n    NA \n    NA \n  \n  \n    Salsa Warbird \n    NA \n    NA \n  \n  \n    Santa Cruz Stigmata \n    NA \n    NA \n  \n  \n    Scott Addict Gravel \n    NA \n    NA \n  \n  \n    Shand Stooshie \n    NA \n    NA \n  \n  \n    Solace OM-3 Short \n    NA \n    NA \n  \n  \n    Soma Wolverine \n    NA \n    NA \n  \n  \n    Specialized Diverge \n    NA \n    NA \n  \n  \n    Specialized Diverge STR \n    NA \n    NA \n  \n  \n    Squid Gravtron \n    NA \n    NA \n  \n  \n    Thesis OB1 \n    NA \n    NA \n  \n  \n    Trek Boone 6 \n    NA \n    NA \n  \n  \n    Trek Checkpoint SL5 \n    NA \n    NA \n  \n  \n    Ventum GS1 \n    NA \n    NA \n  \n  \n    Why R+ V4 \n    NA \n    NA \n  \n  \n    Wilde Rambler SL \n    NA \n    NA \n  \n  \n    Wilier Jena \n    NA \n    NA \n  \n  \n    Wilier Rave SLR \n    NA \n    NA"
  },
  {
    "objectID": "qmd/gravel_scatter old with bscols.html",
    "href": "qmd/gravel_scatter old with bscols.html",
    "title": "Gravel Scatter",
    "section": "",
    "text": "Lengths and Angles\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStyle\n\n\n\n\nAll-Road\n\n\n\n\n\nEndurance\n\n\n\n\n\nTrail\n\n\n\n\n\n\n\n\n\n\n\n\nRatios\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStyle\n\n\n\n\nAll-Road\n\n\n\n\n\nEndurance\n\n\n\n\n\nTrail"
  },
  {
    "objectID": "qmd/which_gravel_bikes_are_mtb_inspired.html",
    "href": "qmd/which_gravel_bikes_are_mtb_inspired.html",
    "title": "Which gravel bikes have mountain bike inspired geometry?",
    "section": "",
    "text": "Classification of gravel bikes is based on a frame size that fits a 176 cm (5’ 9.3\") cm high rider, according to manufacturer’s charts."
  },
  {
    "objectID": "qmd/gravel_tree.html",
    "href": "qmd/gravel_tree.html",
    "title": "Gravel Tree",
    "section": "",
    "text": "Classification of bikes is based on a frame size that fits a 176 cm (5’ 9.3\") cm high rider, according to manufacturer’s charts."
  },
  {
    "objectID": "qmd/mtb_90s.html",
    "href": "qmd/mtb_90s.html",
    "title": "Is a gravel bike a 1990s mountain bike?",
    "section": "",
    "text": "Classification of gravel bikes is based on a frame size that fits a 176 cm (5’ 9.3\") cm high rider, according to manufacturer’s charts."
  },
  {
    "objectID": "qmd/gravel_scatter.html",
    "href": "qmd/gravel_scatter.html",
    "title": "Gravel Scatter",
    "section": "",
    "text": "Hover over data for model and frame size identification.\nScroll legend and click on items to identify specific model and frame size combinations.\nClick on popup icon-bar over legend to zoom in/out and pan.\nClassification of gravel bikes is based on a frame size that fits a 176 cm (5’ 9.3\") cm high rider, according to manufacturer’s charts."
  },
  {
    "objectID": "qmd/gravel_scatter_new.html",
    "href": "qmd/gravel_scatter_new.html",
    "title": "Gravel Scatter new",
    "section": "",
    "text": "scatter_fig_new <- function(x_col = \"reach\", y_col = \"stack\",\n                        x_label = \"Reach\", y_label = \"Stack\",\n                        x_info = NULL, y_info = NULL,\n                        digits = 0,\n                        jitter_x = 0, jitter_y = 0,\n                        annotate_model = NULL,\n                        data = my_fit){\n  #shared_data <- highlight_key(data, ~model)\n  if(is.null(x_info)){x_info <- x_label}\n  if(is.null(y_info)){y_info <- y_label}\n  n_colors <- length(levels(data[, restyle]))\n  my_palette <- pal_okabe_ito_4[1:n_colors]\n  min_data_x <- min(geobike[, get(x_col)])\n  max_data_x <- max(geobike[, get(x_col)])\n  min_data_y <- min(geobike[, get(y_col)])\n  max_data_y <- max(geobike[, get(y_col)])\n  x_min <- min_data_x - 0.1*(max_data_x - min_data_x)\n  x_max <- max_data_x + 0.1*(max_data_x - min_data_x)\n  y_min <- min_data_y - 0.1*(max_data_y - min_data_y)\n  y_max <- max_data_y + 0.1*(max_data_y - min_data_y)\n  setorder(geobike, cols = \"restyle\")\n  geobike[, restyle := factor(restyle,\n                              levels = c(\"All-Road\",\"Endurance\",\"Trail\"))]\n  fig <- geobike %>%\n    plot_ly(\n      type = 'scatter', \n      x = ~get(x_col), \n      y = ~get(y_col),\n      text = ~paste(model, frame_size,\n                    \"<br>Cat:\", restyle,\n                    paste0(\"<br>\", x_info, \":\"), round(get(x_col), digits),\n                    paste0(\"<br>\", y_info, \":\"), round(get(y_col), digits)),\n      hoverinfo = 'text',\n      mode = 'markers',\n      color = ~restyle,\n      colors = pal_okabe_ito_3,\n      # marker = list(color = ~restyle,\n      #               colors = pal_okabe_ito_3,\n      #               size = 10),\n      transforms = list(\n        list(\n          type = 'filter',\n          target = ~frame_size_working,\n          operation = '=',\n          value = levels(geobike$frame_size_working)[3]\n        )\n      )) %>% layout(\n        xaxis = list(title = x_label,\n                     range = c(x_min, x_max),\n                     tickfont = list(size = 16),\n                     titlefont = list(size = 16)),\n        yaxis = list(title = y_label,\n                     range = c(y_min, y_max),\n                     tickfont = list(size = 16),\n                     titlefont = list(size = 16)),\n        legend = list(font = list(size = 10),\n                      itemsizing = \"constant\"),\n        title = list(text = paste(y_label, \"vs.\", x_label),\n                     x = 0,\n                     xanchor = \"left\"),\n        \n        updatemenus = list(\n          list(\n            type = 'dropdown',\n            active = 2, # list starts at 0\n            buttons = list(\n              list(method = \"restyle\",\n                   args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[1]),\n                   label = levels(geobike$frame_size_working)[1]),\n              list(method = \"restyle\",\n                   args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[2]),\n                   label = levels(geobike$frame_size_working)[2]),\n              list(method = \"restyle\",\n                   args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[3]),\n                   label = levels(geobike$frame_size_working)[3]),\n              list(method = \"restyle\",\n                   args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[4]),\n                   label = levels(geobike$frame_size_working)[4]),\n              list(method = \"restyle\",\n                   args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[5]),\n                   label = levels(geobike$frame_size_working)[5]),\n              list(method = \"restyle\",\n                   args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[6]),\n                   label = levels(geobike$frame_size_working)[6])\n            )\n          )\n        )\n      )\n\n  \n  return(fig)\n}\n\n\nscatter_fig_all <- function(x_col = \"reach\", y_col = \"stack\",\n                        x_label = \"Reach\", y_label = \"Stack\",\n                        x_info = NULL, y_info = NULL,\n                        digits = 0,\n                        jitter_x = 0, jitter_y = 0,\n                        annotate_model = NULL,\n                        data = my_fit){\n  #shared_data <- highlight_key(data, ~model)\n  if(is.null(x_info)){x_info <- x_label}\n  if(is.null(y_info)){y_info <- y_label}\n  n_colors <- length(levels(data[, restyle]))\n  my_palette <- pal_okabe_ito_4[1:n_colors]\n  fig <- plot_ly(data, type = \"scatter\", mode = \"markers\",\n                 x = ~jitter(get(x_col), jitter_x),\n                 y = ~jitter(get(y_col), jitter_y),\n                 color = ~restyle,\n                 colors = my_palette,\n                 size = 10,\n                 opacity = 0.3,\n                 name = ~model_size,\n                 hoverinfo = \"text\",\n                 text = ~paste(model, frame_size,\n                               \"<br>Cat:\", restyle,\n                               paste0(\"<br>\", x_info, \":\"), round(get(x_col), digits),\n                               paste0(\"<br>\", y_info, \":\"), round(get(y_col), digits)),\n                 showlegend = FALSE\n  ) %>% \n    # left arrow: \\U2B05\n    # up arrow: \\U2B06\n    # down arrow: \\U2B07\n    # SW arrow: \\U2B0B\n    add_text(text = ~paste(\"\\U2B05\", model, frame_size),\n             textfont = list(size = 14, color = ~restyle),\n             color = ~restyle,\n             colors = my_palette, # doesn't do anything\n             symbol = \"circle\",\n             opacity = 1,\n             textposition = \"right\",\n             visible = \"legendonly\",\n             sort = FALSE,\n             showlegend = TRUE,\n    ) %>%\n    layout(xaxis = list(title = x_label, tickfont = list(size = 16), titlefont = list(size = 16)),\n           yaxis = list(title = y_label, tickfont = list(size = 16), titlefont = list(size = 16)),\n           legend = list(font = list(size = 10),\n                         itemsizing = \"constant\"),\n           title = list(text = paste(y_label, \"vs.\", x_label),\n                        x = 0,\n                        xanchor = \"left\"),\n           # updatemenus = list(\n           #   list(\n           #     type = \"buttons\",\n           #     y = 0.8,\n           #     buttons = list(\n           #       \n           #       list(method = \"restyle\",\n           #            args = list(list(\"marker.opacity\", 0.8), list(\"text.opacity\", 0.8)),\n           #            label = \"dark\"),\n           #       \n           #       list(method = \"restyle\",\n           #            args = list(list(\"marker.opacity\", 0.2), list(\"text.opacity\", 0.8)),\n           #            label = \"light\")))\n           # ),\n           NULL\n    )\n  \n  if(!is.null(annotate_model)){\n    for(j in 1:length(annotate_model)){\n        fig <- fig %>% add_annotations(\n        x = data[model == annotate_model[j], get(x_col)],\n        y = data[model == annotate_model[j], get(y_col)],\n        text = paste(data[model == annotate_model[j], model],\n                     data[model == annotate_model[j], year]),\n        xref = \"x\",\n        yref = \"y\",\n        showarrow = TRUE,\n        arrowhead = 1,\n        ax = 20,\n        ay = -20,\n#        arrowcolor = pal_okabe_ito_4[4],\n        arrowcolor = \"black\",\n#        font = list(color = pal_okabe_ito_4[4], size = 16)\n        font = list(color = \"black\", size = 16)\n      )\n    }\n  }\n  \n  # add style legend -- cannot get color to show\n  # fig <- fig %>% add_annotations(\n  #   x = 0,\n  #   y = 1,\n  #   xref = \"paper\",\n  #   yref = \"paper\",\n  #   text = paste0(\"\\U23FA\", \"Race\"),\n  #   textfont = list(size = 10, color = pal_okabe_ito_4[1]),\n  #   showarrow = F\n  # )\n  \n  \n  return(fig)\n}\n\n\ngeobike[model == \"Alchemy Rogue\"]\n\n           model  year frame_size seat_tube_length top_tube_effective_length\n1: Alchemy Rogue  2022        ‌ XS              515                       460\n2: Alchemy Rogue  2022         ‍ S​              538                       500\n3: Alchemy Rogue  2022         ‎ M​              558                       520\n4: Alchemy Rogue  2022         ‏ L              575                       545\n5: Alchemy Rogue  2022        ‏ XL              591                       560\n6: Alchemy Rogue  2022       ‏ XXL              615                       570\n   head_tube_length seat_tube_angle head_tube_angle chainstay_length wheelbase\n1:              120            73.5           70.00              430      1001\n2:              135            73.5           70.25              430      1022\n3:              150            73.5           70.50              430      1040\n4:              170            73.5           71.25              430      1051\n5:              185            73.5           71.50              430      1067\n6:              200            73.5           71.50              430      1080\n   bottom_bracket_drop fork_offset_rake stack reach standover stem_length\n1:                72.5         50.74331   540   353       748          NA\n2:                72.5         50.74895   555   371       775          NA\n3:                72.5         49.94303   570   387       792          NA\n4:                72.5         50.00690   592   398       815          NA\n5:                72.5         50.55967   607   411       830          NA\n6:                72.5         49.59340   622   420       842          NA\n   handlebar_width crank_length wheel_size tire_width_spec tire_width_max\n1:              NA           NA        700              50             50\n2:              NA           NA        700              50             50\n3:              NA           NA        700              50             50\n4:              NA           NA        700              50             50\n5:              NA           NA        700              50             50\n6:              NA           NA        700              50             50\n      trail bb_height         model_size rear_center front_center seat_center\n1: 77.39336     288.5  Alchemy Rogue ‌ XS     423.844      577.156    159.9553\n2: 75.69146     288.5   Alchemy Rogue ‍ S​     423.844      598.156    164.3985\n3: 74.85481     288.5   Alchemy Rogue ‎ M​     423.844      616.156    168.8417\n4: 69.73349     288.5   Alchemy Rogue ‏ L     423.844      627.156    175.3584\n5: 67.47412     288.5  Alchemy Rogue ‏ XL     423.844      643.156    179.8016\n6: 68.49305     288.5 Alchemy Rogue ‏ XXL     423.844      656.156    184.2448\n   stack_reach front_rear rear_wheelbase front_wheelbase  sta_hta seat_tube_v\n1:    1.529745   1.361718      0.4234206       0.5765794 1.050000    493.7922\n2:    1.495957   1.411264      0.4147202       0.5852798 1.046263    515.8450\n3:    1.472868   1.453733      0.4075423       0.5924577 1.042553    535.0214\n4:    1.487437   1.479686      0.4032769       0.5967231 1.031579    551.3213\n5:    1.476886   1.517436      0.3972296       0.6027704 1.027972    566.6625\n6:    1.480952   1.548107      0.3924482       0.6075518 1.027972    589.6741\n   seat_tube_h seat_v   seat_h   head_v   head_h x1 y1       x2    y2      x3\n1:    146.2679    540 159.9553 112.7631 41.04242  0  0 263.8887 467.5 776.844\n2:    152.8003    555 164.3985 127.0588 45.61876  0  0 259.4455 482.5 794.844\n3:    158.4806    570 168.8417 141.3962 50.07103  0  0 255.0023 497.5 810.844\n4:    163.3088    592 175.3584 160.9781 54.64471  0  0 248.4856 519.5 821.844\n5:    167.8531    607 179.8016 175.4399 58.70136  0  0 244.0424 534.5 834.844\n6:    174.6694    622 184.2448 189.6647 63.46093  0  0 239.5992 549.5 843.844\n      y3       x4       y4   x5 y5      x6    y6       x7       y7   rear_x\n1: 467.5 817.8864 354.7369 1001  0 423.844 -72.5 277.5761 493.7922 -423.844\n2: 482.5 840.4628 355.4412 1022  0 423.844 -72.5 271.0438 515.8450 -423.844\n3: 497.5 860.9150 356.1038 1040  0 423.844 -72.5 265.3635 535.0214 -423.844\n4: 519.5 876.4887 358.5219 1051  0 423.844 -72.5 260.5352 551.3213 -423.844\n5: 534.5 893.5454 359.0601 1067  0 423.844 -72.5 255.9909 566.6625 -423.844\n6: 549.5 907.3049 359.8353 1080  0 423.844 -72.5 249.1746 589.6741 -423.844\n   rear_y    seat_x seat_y head_x head_y  crown_x  crown_y front_x front_y\n1:      0 -159.9553  467.5    353  467.5 394.0424 354.7369 577.156       0\n2:      0 -164.3985  482.5    371  482.5 416.6188 355.4412 598.156       0\n3:      0 -168.8417  497.5    387  497.5 437.0710 356.1038 616.156       0\n4:      0 -175.3584  519.5    398  519.5 452.6447 358.5219 627.156       0\n5:      0 -179.8016  534.5    411  534.5 469.7014 359.0601 643.156       0\n6:      0 -184.2448  549.5    420  549.5 483.4609 359.8353 656.156       0\n   bottom_x bottom_y seattube_x seattube_y my_fit shape_id top_tube_size\n1:        0    -72.5   277.5761   493.7922  FALSE       17     [460,527)\n2:        0    -72.5   271.0438   515.8450  FALSE       17     [460,527)\n3:        0    -72.5   265.3635   535.0214   TRUE       17     [460,527)\n4:        0    -72.5   260.5352   551.3213  FALSE       17     [527,551)\n5:        0    -72.5   255.9909   566.6625  FALSE       17     [551,574)\n6:        0    -72.5   249.1746   589.6741  FALSE       17     [551,574)\n   frame_size_working  restyle\n1:          [460,527) All-Road\n2:          [460,527) All-Road\n3:          [460,527) All-Road\n4:          [527,551) All-Road\n5:          [551,574) All-Road\n6:          [551,574) All-Road\n\ngeobike[model == \"\"]\n\nEmpty data.table (0 rows and 71 cols): model,year,frame_size,seat_tube_length,top_tube_effective_length,head_tube_length...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nput working code here into function\n\n\nThe filter for bike size works\n\nx_info <- NULL\ny_info <- NULL\nx_label <- \"Reach\"\ny_label <- \"Stack\"\nx_col <- \"reach\"\ny_col <- \"stack\"\nannotate_model <- NULL\ndigits = 0\nmin_data_x <- min(geobike[, get(x_col)])\nmax_data_x <- max(geobike[, get(x_col)])\nmin_data_y <- min(geobike[, get(y_col)])\nmax_data_y <- max(geobike[, get(y_col)])\nx_min <- min_data_x - 0.1*(max_data_x - min_data_x)\nx_max <- max_data_x + 0.1*(max_data_x - min_data_x)\ny_min <- min_data_y - 0.1*(max_data_y - min_data_y)\ny_max <- max_data_y + 0.1*(max_data_y - min_data_y)\nsetorder(geobike, cols = \"restyle\")\ngeobike[, restyle := factor(restyle,\n                            levels = c(\"All-Road\",\"Endurance\",\"Trail\"))]\np <- geobike %>%\n  plot_ly(\n    type = 'scatter', \n    x = ~get(x_col), \n    y = ~get(y_col),\n    text = ~paste(model, frame_size,\n                  \"<br>Cat:\", restyle,\n                  paste0(\"<br>\", x_info, \":\"), round(get(x_col), digits),\n                  paste0(\"<br>\", y_info, \":\"), round(get(y_col), digits)),\n    hoverinfo = 'text',\n    mode = 'markers',\n    color = ~restyle,\n    colors = pal_okabe_ito_3,\n    # marker = list(color = ~restyle,\n    #               colors = pal_okabe_ito_3,\n    #               size = 10),\n    transforms = list(\n      list(\n        type = 'filter',\n        target = ~frame_size_working,\n        operation = '=',\n        value = levels(geobike$frame_size_working)[3]\n      )\n  )) %>% layout(\n    xaxis = list(title = x_label,\n                 range = c(x_min, x_max),\n                 tickfont = list(size = 16),\n                 titlefont = list(size = 16)),\n    yaxis = list(title = y_label,\n                 range = c(y_min, y_max),\n                 tickfont = list(size = 16),\n                 titlefont = list(size = 16)),\n    legend = list(font = list(size = 10),\n                  itemsizing = \"constant\"),\n    title = list(text = paste(y_label, \"vs.\", x_label),\n                 x = 0,\n                 xanchor = \"left\"),\n    \n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 2, # list starts at 0\n        buttons = list(\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[1]),\n               label = levels(geobike$frame_size_working)[1]),\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[2]),\n               label = levels(geobike$frame_size_working)[2]),\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[3]),\n               label = levels(geobike$frame_size_working)[3]),\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[4]),\n               label = levels(geobike$frame_size_working)[4]),\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[5]),\n               label = levels(geobike$frame_size_working)[5]),\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[6]),\n               label = levels(geobike$frame_size_working)[6])\n        )\n      )\n    )\n  )\n\np\n\n\n\n\n\n\n\nThe filter for bike size and bike model\n\nx_info <- NULL\ny_info <- NULL\nx_label <- \"Reach\"\ny_label <- \"Stack\"\nx_col <- \"reach\"\ny_col <- \"stack\"\nannotate_model <- NULL\ndigits = 0\nmin_data_x <- min(geobike[, get(x_col)])\nmax_data_x <- max(geobike[, get(x_col)])\nmin_data_y <- min(geobike[, get(y_col)])\nmax_data_y <- max(geobike[, get(y_col)])\nx_min <- min_data_x - 0.1*(max_data_x - min_data_x)\nx_max <- max_data_x + 0.1*(max_data_x - min_data_x)\ny_min <- min_data_y - 0.1*(max_data_y - min_data_y)\ny_max <- max_data_y + 0.1*(max_data_y - min_data_y)\nsetorder(geobike, frame_size_working, model)\ngeobike[, restyle := factor(restyle,\n                            levels = c(\"All-Road\",\"Endurance\",\"Trail\"))]\ngeobike[, model := factor(model)]\n\np <- geobike %>%\n  plot_ly(\n    type = 'scatter', \n    x = ~get(x_col), \n    y = ~get(y_col),\n    text = ~paste(model, frame_size_working,\n                  \"<br>Cat:\", restyle,\n                  paste0(\"<br>\", x_info, \":\"), round(get(x_col), digits),\n                  paste0(\"<br>\", y_info, \":\"), round(get(y_col), digits)),\n    hoverinfo = 'text',\n    mode = 'markers',\n    name = ~ model,\n    color = ~restyle,\n    showlegend = FALSE,\n    # marker = list(color = ~restyle,\n    #               colors = pal_okabe_ito_3,\n    #               size = 10),\n    transforms = list(\n      list(\n        type = 'filter',\n        target = ~frame_size_working,\n        operation = '=',\n        value = levels(geobike$frame_size_working)[3]\n      )\n    )\n  ) %>%\n  \n    add_text(text = ~paste(\"\\U2B05\", model, frame_size_working),\n             name = ~model,\n             textfont = list(size = 12, color = ~restyle),\n             color = ~restyle,\n #            colors = my_palette, # doesn't do anything\n             symbol = \"circle\",\n             textposition = \"right\",\n             visible = \"legendonly\",\n             showlegend = TRUE,\n    ) %>%\n  \n  layout(\n    xaxis = list(title = x_label,\n                 range = c(x_min, x_max)),\n    yaxis = list(title = y_label,\n                 range = c(y_min, y_max)),\n    \n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 2, # list starts at 0\n        buttons = list(\n          list(method = \"update\",\n               args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[1]),\n               label = levels(geobike$frame_size_working)[1]),\n          list(method = \"update\",\n               args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[2]),\n               label = levels(geobike$frame_size_working)[2]),\n          list(method = \"update\",\n               args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[3]),\n               label = levels(geobike$frame_size_working)[3]),\n          list(method = \"update\",\n               args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[4]),\n               label = levels(geobike$frame_size_working)[4]),\n          list(method = \"update\",\n               args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[5]),\n               label = levels(geobike$frame_size_working)[5]),\n          list(method = \"update\",\n               args = list(\"transforms[0].value\", levels(geobike$frame_size_working)[6]),\n               label = levels(geobike$frame_size_working)[6])\n        )\n      )\n    )\n  )\n\np\n\n\n\n\n\n\na <- 1:10\nb <- 1:10\ntext <- LETTERS[seq(1,10)]\ndata <- data.frame(a,b,text)\n\nannotations = list()\nfor (i in 1:length(data[,1])) {\n  annotation <- list(x = data$a[i],\n                      y = data$b[i],\n                      text = data$text[i],\n                      showarrow = TRUE)\n  annotations[[i]] <- annotation\n}\n\nupdatemenus <- list(\n  list(\n    type= 'buttons',\n    buttons = list(\n      list(\n        label = \"ON\",\n        method = \"update\",\n        args = list(list(),\n                    list(annotations = annotations))),\n      list(\n        label = \"OFF\",\n        method = \"update\",\n        args = list(list(),\n                    list(annotations = list(c()))))\n    )\n  )\n)\n\np <- plot_ly(data = data, x = ~a, y = ~b, type = \"scatter\", mode = \"lines\")\np <- layout(p, annotations = annotations, updatemenus = updatemenus)\np"
  },
  {
    "objectID": "Rmd/bike_geometry_project.html",
    "href": "Rmd/bike_geometry_project.html",
    "title": "Bike Geometry Project",
    "section": "",
    "text": "knitr::opts_chunk$set(echo = TRUE,\n                      message = FALSE,\n                      warning = FALSE,\n                      knitr.kable.NA = '')\n# wrangling packages\nlibrary(here) # here makes a project transportable\nlibrary(janitor) # clean_names\nlibrary(readxl) # read excel, duh!\nlibrary(data.table) # magical data frames\nlibrary(magrittr) # pipes\nlibrary(stringr) # string functions\nlibrary(forcats) # factor functions\nlibrary(arules) # discretize function\n\n# analysis packages\nlibrary(emmeans) # the workhorse for inference\nlibrary(nlme) # gls and some lmm\nlibrary(lme4) # linear mixed models\nlibrary(lmerTest) # linear mixed model inference\nlibrary(afex) # ANOVA linear models\nlibrary(glmmTMB) # generalized linear models\nlibrary(MASS) # negative binomial and some other functions\nlibrary(car) # model checking and ANOVA\nlibrary(DHARMa) # model checking\nlibrary(mvtnorm)\n\n# graphing packages\nlibrary(ggsci) # color palettes\nlibrary(ggpubr) # publication quality plots\nlibrary(ggforce) # better jitter\nlibrary(cowplot) # combine plots\nlibrary(knitr) # kable tables\nlibrary(kableExtra) # kable_styling tables\nlibrary(ggdendro) # dendrogram\nlibrary(dendextend) # better dendrogram\nlibrary(ggiraph)\nlibrary(GGally)\n\n# plotly\nlibrary(plotly)\nlibrary(flexdashboard)\nlibrary(crosstalk)\n\n# ggplot_the_model.R packages not loaded above\nlibrary(insight)\nlibrary(lazyWeave)\n\n# use here from the here package\nhere <- here::here\n# use clean_names from the janitor package\nclean_names <- janitor::clean_names\n# use transpose from data.table\ntranspose <- data.table::transpose\n\n# load functions used by this text written by me\n# ggplot_the_model.R needs to be in the folder \"R\"\n# if you didn't download this and add to your R folder in your\n# project, then this line will cause an error\n#source_path <- here(\"R\", \"ggplot_the_model.R\")\n#source(source_path)\n\ndata_folder <- \"data\"\nimage_folder <- \"images\"\noutput_folder <- \"output\"\n\npal_okabe_ito <- c(\n  \"#E69F00\",\n  \"#56B4E9\",\n  \"#009E73\",\n  \"#F0E442\",\n  \"#0072B2\",\n  \"#D55E00\",\n  \"#CC79A7\"\n)\n\npal_okabe_ito_3 <- pal_okabe_ito[c(2,3,1)]\npal_okabe_ito_4 <- c(pal_okabe_ito_3, pal_okabe_ito[c(6)])"
  },
  {
    "objectID": "Rmd/bike_geometry_project.html#general",
    "href": "Rmd/bike_geometry_project.html#general",
    "title": "Bike Geometry Project",
    "section": "General",
    "text": "General\n\ndeg_2_rad <- function(x){\n  rad <- x*pi/180\n  return(rad)\n}"
  },
  {
    "objectID": "Rmd/bike_geometry_project.html#dendrogram",
    "href": "Rmd/bike_geometry_project.html#dendrogram",
    "title": "Bike Geometry Project",
    "section": "Dendrogram",
    "text": "Dendrogram\n\n# https://atrebas.github.io/post/2019-06-08-lightweight-dendrograms/\ndendro_data_k <- function(hc, k) {\n  hcdata    <-  ggdendro::dendro_data(hc, type = \"rectangle\")\n  seg       <-  hcdata$segments\n  labclust  <-  cutree(hc, k)[hc$order]\n  segclust  <-  rep(0L, nrow(seg))\n  heights   <-  sort(hc$height, decreasing = TRUE)\n  height    <-  mean(c(heights[k], heights[k - 1L]), na.rm = TRUE)\n  \n  for (i in 1:k) {\n    xi      <-  hcdata$labels$x[labclust == i]\n    idx1    <-  seg$x    >= min(xi) & seg$x    <= max(xi)\n    idx2    <-  seg$xend >= min(xi) & seg$xend <= max(xi)\n    idx3    <-  seg$yend < height\n    idx     <-  idx1 & idx2 & idx3\n    segclust[idx] <- i\n  }\n  \n  idx                    <-  which(segclust == 0L)\n  segclust[idx]          <-  segclust[idx + 1L]\n  hcdata$segments$clust  <-  segclust\n  hcdata$segments$line   <-  as.integer(segclust < 1L)\n  hcdata$labels$clust    <-  labclust\n  \n  hcdata\n}\n\nset_labels_params <- function(nbLabels,\n                              direction = c(\"tb\", \"bt\", \"lr\", \"rl\"),\n                              fan       = FALSE) {\n  if (fan) {\n    angle       <-  360 / nbLabels * 1:nbLabels + 90\n    idx         <-  angle >= 90 & angle <= 270\n    angle[idx]  <-  angle[idx] + 180\n    hjust       <-  rep(0, nbLabels)\n    hjust[idx]  <-  1\n  } else {\n    angle       <-  rep(0, nbLabels)\n    hjust       <-  0\n    if (direction %in% c(\"tb\", \"bt\")) { angle <- angle + 45 }\n    if (direction %in% c(\"tb\", \"rl\")) { hjust <- 1 }\n  }\n  list(angle = angle, hjust = hjust, vjust = 0.5)\n}\n\nplot_ggdendro <- function(hcdata,\n                          direction   = c(\"lr\", \"rl\", \"tb\", \"bt\"),\n                          fan         = FALSE,\n                          scale.color = NULL,\n                          branch.size = 1,\n                          label.size  = 3,\n                          nudge.label = 0.01,\n                          expand.y    = 0.1) {\n  \n\n  direction <- match.arg(direction) # if fan = FALSE\n  ybreaks   <- pretty(segment(hcdata)$y, n = 5)\n  ymax      <- max(segment(hcdata)$y)\n  \n  ## branches\n  p <- ggplot() +\n    geom_segment(data         =  segment(hcdata),\n                 aes(x        =  x,\n                     y        =  y,\n                     xend     =  xend,\n                     yend     =  yend,\n                     linetype =  factor(line),\n                     colour   =  factor(clust)),\n                 lineend      =  \"round\",\n                 show.legend  =  FALSE,\n                 size         =  branch.size)\n  \n  ## orientation\n  if (fan) {\n    p <- p +\n      coord_polar(direction = -1) +\n      scale_x_continuous(breaks = NULL,\n                         limits = c(0, nrow(label(hcdata)))) +\n      scale_y_reverse(breaks = ybreaks)\n  } else {\n    p <- p + scale_x_continuous(breaks = NULL)\n    if (direction %in% c(\"rl\", \"lr\")) {\n      p <- p + coord_flip()\n    }\n    if (direction %in% c(\"bt\", \"lr\")) {\n      p <- p + scale_y_reverse(breaks = ybreaks)\n    } else {\n      p <- p + scale_y_continuous(breaks = ybreaks)\n      nudge.label <- -(nudge.label)\n    }\n  }\n  \n  # labels\n  labelParams <- set_labels_params(nrow(hcdata$labels), direction, fan)\n  hcdata$labels$angle <- labelParams$angle\n  \n  p <- p +\n    geom_text(data        =  label(hcdata),\n              aes(x       =  x,\n                  y       =  y,\n                  label   =  label,\n                  colour  =  factor(clust),\n                  angle   =  angle),\n              vjust       =  labelParams$vjust,\n              hjust       =  labelParams$hjust,\n              nudge_y     =  ymax * nudge.label,\n              size        =  label.size,\n              show.legend =  FALSE)\n  \n  # theme\n    # p <- p + theme_pubr() +\n    #   theme(axis.text.x=element_blank())\n  \n  # colors and limits\n  if (!is.null(scale.color)) {\n    scale.color <- c(\"#000000\", scale.color) #my addition\n    p <- p + scale_color_manual(values = scale.color)\n  }\n  \n  ylim <- -round(ymax * expand.y, 1)\n  p    <- p + expand_limits(y = ylim)\n\n  \n  p\n}\n\n\nget_tree <- function(geobike_subset,\n                  y_cols,\n                  scale_it = TRUE,\n                  center_it = TRUE,\n                  hclust_method = \"ward.D2\"\n){\n  # dd <- dist(scale(geobike_subset[, .SD, .SDcols = y_cols],\n  #                  center = center_it,\n  #                  scale = scale_it),\n  #            method = \"euclidean\")\n  # dendro <- hclust(dd, method = hclust_method) %>%\n  #   as.dendrogram() %>%\n  #   place_labels(paste(geobike_subset[, model],\n  #                      geobike_subset[, frame_size],\n  #                      sep = \", \"))\n  \n  cluster_data <- geobike_subset[, .SD, .SDcols = y_cols] %>%\n    data.frame\n  row.names(cluster_data) <- paste(geobike_subset[, model],\n                                   geobike_subset[, frame_size],\n                                   sep = \", \")\n  d_matrix <- dist(scale(cluster_data,\n                         center = center_it,\n                         scale = scale_it),\n                   method = \"euclidean\")\n  hc <- hclust(d_matrix, method = hclust_method)\n  return(hc)\n  \n}"
  },
  {
    "objectID": "Rmd/bike_geometry_project.html#bike-geometry-helpers",
    "href": "Rmd/bike_geometry_project.html#bike-geometry-helpers",
    "title": "Bike Geometry Project",
    "section": "Bike geometry helpers",
    "text": "Bike geometry helpers\n\ncompute_axle_crown <- function(){\n  \n}\n\ncompute_chainstay_h <- function(bike){\n  # the horizontal component of chainstay length \n  # bbd = bottom bracket drop\n  # csl = chainstay length\n  chainstay_h <- with(bike,\n                      sqrt(chainstay_length^2 - bottom_bracket_drop^2))\n  return(chainstay_h)\n}\n\n\ncompute_offset_h <- function(bike){\n  # the horizontal component of fork offset\n  offset_h <- with(bike,\n                 fork_offset_rake/sin(deg_2_rad(head_tube_angle)))\n  return(offset_h)\n}\n\ncompute_head_tube_h <- function(bike){\n  # the horizontal component of head_tube\n  head_tube_h <- with(bike,\n               head_tube_length*cos(deg_2_rad(head_tube_angle)))\n  return(head_tube_h)\n}\ncompute_head_tube_v <- function(bike){\n  # the vertical component of head_tube\n  head_tube_v <- with(bike,\n                      head_tube_length*sin(deg_2_rad(head_tube_angle)))\n  return(head_tube_v)\n}\n\ncompute_fork_angle <- function(bike){\n  # angle of fork axle-crown axis to horizontal\n  # beta is angle of fork axle-crow to offset line\n  beta <- with(bike,\n               acos(fork_offset_rake/axle_crown)*180/pi)\n  # delta is angle from offset line to horizontal\n  delta <- with(bike,\n                90 - head_tube_angle)\n  fork_angle <- beta - delta\n  return(fork_angle)\n}\n\ncompute_steering_v <- function(bike){\n  # steering_v is the vertical component of the steering axis from top of head tube\n  # to the horizontal line through wheel axles - so height from axle to head tube crown\n  steering_v <- with(bike,\n                     stack - bottom_bracket_drop)\n  return(steering_v)\n}\n\ncompute_steering_h <- function(bike){\n  steering_v <- compute_steering_v(bike)\n  steering_h <- with(bike,\n                     steering_v/tan(deg_2_rad(head_tube_angle)))\n  return(steering_h)\n}"
  },
  {
    "objectID": "Rmd/bike_geometry_project.html#compute-missing-data",
    "href": "Rmd/bike_geometry_project.html#compute-missing-data",
    "title": "Bike Geometry Project",
    "section": "Compute missing data",
    "text": "Compute missing data\n\ncompute_wheelbase <- function(bike){\n  steering_v <- compute_steering_v(bike)\n  steering_h <- compute_steering_h(bike)\n  offset_h <- compute_offset_h(bike)\n  chainstay_h <- compute_chainstay_h(bike)\n  wheelbase <- with(bike,\n                    chainstay_h + reach + steering_h + offset_h)\n  return(wheelbase)\n}\n\n# Solace OM3 does not specify head tube length. This can be\n# computed using specs of Whisky MCX fork assuming this is\n# the fork used to spec wheelbase\nhead_tube_length <- function(bike){\n  offset_h <- compute_offset_h(bike)\n  fork_angle <- compute_fork_angle(bike)\n}\n\n# Vagabond Genesis does not specify chainstay length.\ncompute_chainstay_length <- function(bike){\n  head_tube_h <- compute_head_tube_h(bike)\n  head_tube_v <- compute_head_tube_v(bike)\n  fork_v <- with(bike,\n                 stack - bottom_bracket_drop - head_tube_v)\n  \n  fork_h1 = with(bike,\n                 fork_v/tan(deg_2_rad(head_tube_angle)))\n  offset_h <- compute_offset_h(bike)\n  chainstay_h <- with(bike,\n                      wheelbase - reach - head_tube_h - fork_h1 - \n                        offset_h)\n  \n  chainstay <- with(bike,\n                    sqrt(chainstay_h^2 + bottom_bracket_drop^2))\n  \n  return(chainstay)\n}\n\ncompute_fork_offset <- function(bike){\n  # steer_axis_h is base of triangle from top-head-tube to vertex created by steering axis and wheelbase.\n  # tan hta <- stack/steer_axis_h\n  steer_axis_v <- with(bike,\n                       stack - bottom_bracket_drop)\n  steer_axis_h <- with(bike,\n                       steer_axis_v /\n                         tan(deg_2_rad(head_tube_angle)))\n  chainstay_h <- compute_chainstay_h(bike)\n  offset_h <- with(bike,\n                   wheelbase - chainstay_h - reach - steer_axis_h)\n  offset <- with(bike,\n                 offset_h * sin(deg_2_rad(head_tube_angle)))\n  return(offset)\n}\n\ncompute_effective_top_tube_length <- function(bike){\n  # amigo bug out is missing this\n  #\n  seat_h <- with(bike,\n                 stack/tan(deg_2_rad(seat_tube_angle)))\n  effective_top_tube_length <- with(bike,\n                                    seat_h + reach)\n  return(effective_top_tube_length)\n}"
  },
  {
    "objectID": "Rmd/bike_geometry_project.html#geometery-checker",
    "href": "Rmd/bike_geometry_project.html#geometery-checker",
    "title": "Bike Geometry Project",
    "section": "geometery checker",
    "text": "geometery checker\n\ngeom_checker <- function(chainstay_length, # chainstay length\n                         bottom_bracket_drop, # bottom bracket drop\n                         reach,\n                         stack,\n                         head_tube_angle, # head tube angle\n                         rake, # head tube length\n                         wheelbase){ # wheelbase\n  # do all the horizontal components add to wheelbase?\n  chainstay_length_h <- compute_chainstay_h(bike)\n  steer_axis_v <- stack - bottom_bracket_drop\n  steer_axis_h <- steer_axis_v /\n    tan(deg_2_rad(head_tube_angle))\n\n  offset_h <- compute_offset_h(bike)\n  wheelbase_computed <- chainstay_length_h + reach +\n    steer_axis_h + offset_h\n\n  }"
  },
  {
    "objectID": "Rmd/geometry_plotly.html",
    "href": "Rmd/geometry_plotly.html",
    "title": "Bike Geometry Project",
    "section": "",
    "text": "Trail \n    Endurance \n    All-Road \n  \n \n\n  \n    Enigma Escape Flat-bar \n    Tumbleweed Stargazer \n    Argonaut GR3 \n  \n  \n    Revel Rover \n    Reeb Sams Pants \n    Solace OM-3 Short \n  \n  \n    Sonder Camino AL \n    Tout Terrain Scrambler 28 \n    Squid Gravtron \n  \n  \n    Fezzari Shafer \n    Ritchey Outback frameset \n    Cannondale Topstone Lefty \n  \n  \n    Fiftyone Assassin long-low \n    Salsa Vaya \n    Lauf Siegla \n  \n  \n    BMC URS AL SUS \n    Genesis Vagabond \n    Why R+ V4 \n  \n  \n    Kona Sutra ULTD \n    Bombtrack Beyond 2 \n    Thesis OB1 \n  \n  \n    Kanzo Adventure New \n    Light Blue Darwin \n    Blackheart All Road TI \n  \n  \n    Mosaic GT-1X \n    Bearclaw Beaux Jaxon \n    OPEN U.P. \n  \n  \n    Fiftyone Assassin short-hi \n    Salsa Fargo rear dropout \n    Ventum GS1 \n  \n  \n    BMC URS One \n    BlackMtnCy La Cabra \n    Canyon Grail 7 1by \n  \n  \n    Marin DSX 2 \n    Salsa Fargo front dropout \n    Ribble Gravel SL \n  \n  \n    BMC URS AL \n    Cinelli Hobootleg Geo \n    All-City Cosmic Stallion \n  \n  \n    Knolly Cache Steel \n    Panorama Taiga EXP \n    Cervelo Aspero \n  \n  \n    Whyte Friston Gravel \n    Salsa Cutthroat \n    Cannondale SuperSix Evo \n  \n  \n    Cotic Cascade \n    Mason InSearchOf \n    No22 Drifter X \n  \n  \n    Chumba Yaupon \n    Moots Routt ESC \n    Chumba Terlingua steel fdo \n  \n  \n    Bombtrack Beyond+ Adv \n    Chiru Kegeti \n    Shand Stooshie \n  \n  \n    Breezer Radar X Pro \n     \n    Pinarello Grevil F \n  \n  \n    Surly Ghost Grappler \n     \n    Open WI.DE \n  \n  \n    Specialized Diverge Evo \n     \n    All-City Gorilla Monsoon \n  \n  \n    Fustle Causway GR1 \n     \n    Ibis Hakka MX \n  \n  \n    Otso Fenrir \n     \n    Bombtrack Hook \n  \n  \n    Amigo Bug Out \n     \n    Rose Backroad XPLR \n  \n  \n    Nordest Kutxo \n     \n    Trek Checkpoint SL5 \n  \n  \n    YT Szepter \n     \n    Otso Waheela C rear \n  \n  \n    Rondo MYLC CF Lo \n     \n    Commencal 365 \n  \n  \n    Rondo MYLC CF Hi \n     \n    Noble GX 5 \n  \n  \n    Evil Chamois Hagar GRX \n     \n    Obed Boundary \n  \n  \n    Hudski Doggler Gravel \n     \n    Salsa Warbird \n  \n  \n     \n     \n    Niner RLT 9 RDO \n  \n  \n     \n     \n    BlackMtnCy Monstercross V5 \n  \n  \n     \n     \n    Otso Warakin Stainless \n  \n  \n     \n     \n    Wilde Rambler SL \n  \n  \n     \n     \n    Canyon Grizl 7 1by \n  \n  \n     \n     \n    Giant Revolt X pro 1 long \n  \n  \n     \n     \n    Giant Revolt pro long \n  \n  \n     \n     \n    Liz Devote Advance \n  \n  \n     \n     \n    Merida Silex \n  \n  \n     \n     \n    Specialized Diverge STR \n  \n  \n     \n     \n    Focus Atlas 8.9 \n  \n  \n     \n     \n    Alchemy Lycos \n  \n  \n     \n     \n    Orbea Terra M \n  \n  \n     \n     \n    Wilier Rave SLR \n  \n  \n     \n     \n    Scott Addict Gravel \n  \n  \n     \n     \n    Devinci Hatchet \n  \n  \n     \n     \n    Alchemy Rogue \n  \n  \n     \n     \n    Orbea Terra H \n  \n  \n     \n     \n    Wilier Jena \n  \n  \n     \n     \n    Otso Waheela C front \n  \n  \n     \n     \n    Trek Boone 6 \n  \n  \n     \n     \n    Giant Revolt X pro 1 short \n  \n  \n     \n     \n    Santa Cruz Stigmata \n  \n  \n     \n     \n    Soma Wolverine \n  \n  \n     \n     \n    Specialized Diverge \n  \n  \n     \n     \n    Giant Revolt pro short \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStyle\n\n\n\n\nTrail\n\n\n\n\n\nEndurance\n\n\n\n\n\nAll-Road\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStyle\n\n\n\n\nTrail\n\n\n\n\n\nEndurance\n\n\n\n\n\nAll-Road\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStyle\n\n\n\n\nTrail\n\n\n\n\n\nEndurance\n\n\n\n\n\nAll-Road"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bike Geometry Project",
    "section": "",
    "text": "The Gravel Scatter page contains interactive, 2D scatter plots of different pairs of frame geometry measures for all gravel bike models and frame sizes in the database.\n\n\n\n\n\nThe Gravel Tree page contains a tree diagram showing the relative similarity in frame geometry among all gravel bikes in the database and the clustering of the models into three major styles.\n\n\n\n\n\nThe Gravel Style page contains a table of the classification of all gravel bike models in the database into All-road, Endurance, and Trail categories.\n\n\n\n\n\nAlso, check out the Gravel Stories\nWhich gravel bikes have mountain bike inspired geometry?\nIs a gravel bike a 1990s mountain bike?\ncopyright 2022 Jeffrey A. Walker"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Jeff Walker",
    "section": "",
    "text": "I’m a Professor of Biology at the University of Southern Maine in Portland with a research program that has moved from geometric morphometrics to fish swimming biomechanics, to best practices in statistics for experimental bench biologists.\nFor recreation, I’m mostly a mountain runner but also XC skier, backcountry skier (mostly resort uphill), and gravel cyclist, and do most of these activities in the White Mountains of New Hampshire.\nThe bike geometry project combines my interests in biological shape, biomechanics, biostatistics, and outdoor recreation."
  }
]